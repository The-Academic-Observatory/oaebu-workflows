{# Copyright 2020 Curtin University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Richard Hosking #}
{#
The purpose of this script it to export the book year metrics section from the book_product table
Primarily, the goal is to create a flat structure which is suitable for graphing in Kibana
#}

CREATE TEMP FUNCTION group_counts(counts ARRAY<STRUCT<name STRING, value INT64>>) AS (
  (SELECT
    SUM(value) as value
  FROM UNNEST(counts))
);

SELECT
    CAST(onix.published_year as INT64) as published_year,
    count(ISBN13) as unique_books,
    month.month,
    STRUCT(
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.views_total_country)) as page_views,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_total_country)) as downloads,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_pdf_book_country)) as downloads_pdf_book,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_pdf_chapter_country)) as downloads_pdf_chapter,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_html_chapter_country)) as downloads_html_chapter,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_epub_book_country)) as downloads_epub_book,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_epub_chapter_country)) as downloads_epub_chapter,
        group_counts(ARRAY_CONCAT_AGG(month.google_analytics.downloads_mobi_book_country)) as downloads_mobi_book
    ) as google_analytics,
    STRUCT(group_counts(ARRAY_CONCAT_AGG(month.crossref_events)) as count) as crossref_events,
    STRUCT(
        SUM(month.google_books_traffic.Book_Visits_BV_) as Book_Visits_BV_,
        SUM(month.google_books_traffic.BV_with_Pages_Viewed) as BV_with_Pages_Viewed,
        SUM(month.google_books_traffic.Non_Unique_Buy_Clicks) as Non_Unique_Buy_Clicks,
        SUM(month.google_books_traffic.BV_with_Buy_Clicks) as BV_with_Buy_Clicks,
        SUM(month.google_books_traffic.Buy_Link_CTR) as Buy_Link_CTR,
        SUM(month.google_books_traffic.Pages_Viewed) as Pages_Viewed
    ) as google_books_traffic,
    STRUCT(
        SUM(month.google_books_sales.qty) as qty
    ) as google_books_sales,
    STRUCT(group_counts(ARRAY_CONCAT_AGG(month.jstor_country)) as Total_Item_Requests) as jstor,
    STRUCT(
        SUM(month.irus_oapen.title_requests) as title_requests,
        SUM(month.irus_oapen.total_item_investigations) as total_item_investigations,
        SUM(month.irus_oapen.total_item_requests) as total_item_requests,
        SUM(month.irus_oapen.unique_item_investigations) as unique_item_investigations,
        SUM(month.irus_oapen.unique_item_requests) as unique_item_requests
    ) as irus_oapen,
    STRUCT(
        SUM(month.irus_fulcrum.total_item_investigations) as total_item_investigations,
        SUM(month.irus_fulcrum.total_item_requests) as total_item_requests,
        SUM(month.irus_fulcrum.unique_item_investigations) as unique_item_investigations,
        SUM(month.irus_fulcrum.unique_item_requests) as unique_item_requests
    ) as irus_fulcrum,
FROM `{{ book_product_table_id }}`, UNNEST(months) as month
WHERE month.irus_fulcrum IS NOT NULL OR month.irus_oapen IS NOT NULL OR month.google_books_traffic IS NOT NULL OR month.google_books_sales IS NOT NULL OR month.google_analytics IS NOT NULL OR ARRAY_LENGTH(month.crossref_events) > 0 OR ARRAY_LENGTH(month.jstor_country) > 0
GROUP BY onix.published_year, month
ORDER BY published_year DESC, month DESC
